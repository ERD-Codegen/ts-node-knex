/* eslint-disable global-require */

/**
 *
 * Full OpenAPI Documentation
 * https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md
 *
 */

"use strict";

const _ = require("lodash");

const packageJSON = require("../package.json");

const getSwaggerFromJoi = require("./getSwaggerFromJoi");

/**
 *
 * Schemas
 *
 */
const schema = getSwaggerFromJoi(
	{
		user: require("../user/user.schema"),
		profile: require("../profile/profile.schema")
	}
);

const HOST = "localhost:3100";

async function generate() {
	return {
		/**
		 *
		 * Metadata
		 *
		 * Then, you need to specify the API info â€“ title, description (optional),
		 * version (API version, not file revision or Swagger version).
		 */
		swagger: "2.0",
		info: {
			title: "Real World Application",
			description: "Example Node (Express + MySql) codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the RealWorld API spec.",
			termsOfService: `http://${HOST}/termsOfService.html`,
			version: packageJSON.version,
			contact: {
				name: "Ken Yip",
				url: "https://github.com/kenyipp",
				email: "ken20206@gmail.com"
			},
			license: {
				name: "MIT",
				url: "https://opensource.org/licenses/MIT"
			}
		},
		/**
		 *
		 * Base URL
		 * The base URL for all API calls is defined using schemes, host and basePath:
		 *
		 */
		host: HOST,
		basePath: "/api",
		schemes: [
			"http"
			// "https"
		],
		/**
		 *
		 * Consumes, Produces
		 * The consumes and produces sections define the MIME types supported by the API.
		 * The root-level definition can be overridden in individual operations.
		 *
		 * https://swagger.io/docs/specification/2-0/mime-types
		 *
		 */
		consumes: [
			"application/json"
		],
		produces: [
			"application/json"
		],
		securityDefinitions: {
			Token: {
				type: "apiKey",
				name: "Authorization",
				description: "For accessing the protected API resources, you must have received a a valid JWT token after registering or logging in. This JWT token must then be used for all protected resources by passing it in via the 'Authorization' header.\n\nA JWT token is generated by the API by either registering via /users or logging in via /users/login.\n\nThe following format must be in the 'Authorization' header :\n\n    Token: xxxxxx.yyyyyyy.zzzzzz\n    \n",
				in: "header"
			}
		},
		paths: {
			"/users/login": {
				/**
				 *
				 * Authentication
				 *
				 */
				post: {
					summary: "Existing User Login",
					description: "Login for existing user",
					tags: [
						"User"
					],
					produces: [
						"application/json"
					],
					operationId: "UserLogin",
					parameters: [
						{
							name: "body",
							in: "body",
							required: true,
							description: "Credentials to use",
							schema: {
								$ref: "#/definitions/UserLoginRequest"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							schema: schema.user.doc,
							examples: {
								"application/json": require("../.response/user.json")
							}
						},
						401: {
							description: "Unauthorized",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						422: {
							description: "Unprocessable Entity",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/users": {
				post: {
					/**
					 *
					 * Registration
					 *
					 */
					summary: "User Registration",
					description: "Register a new user",
					operationId: "CreateUser",
					tags: [
						"User"
					],
					produces: [
						"application/json"
					],
					parameters: [
						{
							name: "body",
							in: "body",
							required: true,
							description: "Details of the new user to register",
							schema: {
								$ref: "#/definitions/UserRegisterRequest"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							schema: schema.user.doc,
							examples: {
								"application/json": require("../.response/user.json")
							}
						},
						422: {
							description: "Unprocessable Entity",
							schema: {
								$ref: "#/definitions/GeneralError"
							},
							examples: {
								"application/json": require("../.response/user-register-422.json")
							}
						},
						500: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/user": {
				/**
				 *
				 * Get Current User
				 *
				 */
				get: {
					summary: "Get Current User",
					description: "Get the user document from requests' access token",
					operationId: "getCurrentUser",
					tags: [
						"User"
					],
					produces: [
						"application/json"
					],
					responses: {
						200: {
							description: "Success",
							schema: schema.user.doc,
							examples: {
								"application/json": require("../.response/user.json")
							}
						},
						403: {
							description: "Forbidden",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						default: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/profiles/:username": {
				get: {
					summary: "Get a profile",
					description: "Get a profile of a user of the system. Auth is optional",
					tags: [
						"Profile"
					],
					operationId: "GetProfileByUsername",
					parameters: [
						{
							name: "username",
							in: "path",
							required: true,
							description: "Username of the profile to get",
							schema: {
								$ref: "#/definitions/Username"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							// Get profile API will not return the user token
							schema: schema.profile.doc,
							examples: {
								"application/json": require("../.response/profile.json")
							}
						},
						403: {
							description: "Forbidden",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						default: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			},
			"/profiles/{username}/follow": {
				post: {
					summary: "Follow a user",
					description: "Follow a user by username",
					tags: [
						"Profile"
					],
					security: [
						{
							Token: []
						}
					],
					operationId: "FollowUserByUsername",
					parameters: [
						{
							name: "username",
							in: "path",
							required: true,
							description: "Username of the profile to get",
							schema: {
								$ref: "#/definitions/Username"
							}
						}
					],
					responses: {
						200: {
							description: "Success",
							schema: schema.profile.doc,
							examples: {
								"application/json": _.set(require("../.response/profile.json"), "profile.following", true)
							}
						},
						403: {
							description: "Forbidden",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						},
						default: {
							description: "Internal Server Error",
							schema: {
								$ref: "#/definitions/GeneralError"
							}
						}
					}
				}
			}
		},
		definitions: {
			UserLoginRequest: schema.user.login,
			UserRegisterRequest: schema.user.register,
			Username: schema.user.doc.properties.username,
			GeneralError: {
				properties: {
					errors: {
						type: "object",
						properties: {
							message: {
								type: "string",
								description: "A summary of the error that occurs"
							},
							body: {
								type: "array",
								description: "An array of error messages",
								items: {
									type: "string"
								}
							}
						}
					}
				}
			}
		},
		externalDocs: {
			description: "Find out more GitHub projects of the author",
			url: "https://github.com/kenyipp"
		}
	};
}

module.exports = generate;
